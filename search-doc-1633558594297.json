[{"title":"Instant","type":0,"sectionRef":"#","url":"api/Instant","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Instant","url":"api/Instant#functions","content":" "},{"title":"new","type":1,"pageTitle":"Instant","url":"api/Instant#new","content":"&lt;/&gt; Instant.new(targetValue: number) → Instant Creates a new Instant.  "},{"title":"step","type":1,"pageTitle":"Instant","url":"api/Instant#step","content":"&lt;/&gt; Instant:step() → () Returns a complete MotorState with value set to targetValue. "},{"title":"Linear","type":0,"sectionRef":"#","url":"api/Linear","content":"","keywords":""},{"title":"Types","type":1,"pageTitle":"Linear","url":"api/Linear#types","content":" "},{"title":"LinearOptions","type":1,"pageTitle":"Linear","url":"api/Linear#LinearOptions","content":"&lt;/&gt; interface LinearOptions { velocity: number-- How fast the goal should move towards the target. Default: 1 }  "},{"title":"Functions","type":1,"pageTitle":"Linear","url":"api/Linear#functions","content":" "},{"title":"new","type":1,"pageTitle":"Linear","url":"api/Linear#new","content":"&lt;/&gt; Linear.new( targetValue: number, options: LinearOptions ) → Linear Creates a new Linear.  "},{"title":"step","type":1,"pageTitle":"Linear","url":"api/Linear#step","content":"&lt;/&gt; Linear:step() → () Advances the specified MotorState by deltaTime * velocity and returns a new MotorState. "},{"title":"Spring","type":0,"sectionRef":"#","url":"api/Spring","content":"","keywords":""},{"title":"Types","type":1,"pageTitle":"Spring","url":"api/Spring#types","content":" "},{"title":"SpringOptions","type":1,"pageTitle":"Spring","url":"api/Spring#SpringOptions","content":"&lt;/&gt; interface SpringOptions { frequency: number | nil-- Oscillation rate (in hz) when dampingRatio is 1. Default: 4 dampingRatio: number | nil-- How rapidly the oscillations decay from one bounce to the next. Default: 1 }  "},{"title":"Functions","type":1,"pageTitle":"Spring","url":"api/Spring#functions","content":" "},{"title":"new","type":1,"pageTitle":"Spring","url":"api/Spring#new","content":"&lt;/&gt; Spring.new( targetValue: number, options: SpringOptions ) → Spring Creates a new Spring.  "},{"title":"step","type":1,"pageTitle":"Spring","url":"api/Spring#step","content":"&lt;/&gt; Spring:step( state: MotorState, deltaTime: number ) → MotorState Advances the specified MotorState by deltaTime using the spring solver and returns a new MotorState. "},{"title":"SingleMotor","type":0,"sectionRef":"#","url":"api/SingleMotor","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"SingleMotor","url":"api/SingleMotor#functions","content":" "},{"title":"new","type":1,"pageTitle":"SingleMotor","url":"api/SingleMotor#new","content":"&lt;/&gt; SingleMotor.new( initialValue: number, useImplicitConnections: boolean-- Should connections to RunService be automatically managed? ) → SingleMotor Creates a new SingleMotor.  "},{"title":"__tostring","type":1,"pageTitle":"SingleMotor","url":"api/SingleMotor#__tostring","content":"&lt;/&gt; SingleMotor:__tostring() → string Returns the type of motor. Used for isMotor.  "},{"title":"getValue","type":1,"pageTitle":"SingleMotor","url":"api/SingleMotor#getValue","content":"&lt;/&gt; SingleMotor:getValue() → number Returns the current value of the SingleMotor.  "},{"title":"setGoal","type":1,"pageTitle":"SingleMotor","url":"api/SingleMotor#setGoal","content":"&lt;/&gt; SingleMotor:setGoal(goal: Goal) → nil Sets the target goal and hooks up a new connection if useImplicitConnections is enabled.  "},{"title":"step","type":1,"pageTitle":"SingleMotor","url":"api/SingleMotor#step","content":"&lt;/&gt; SingleMotor:step(deltaTime: number) → boolean-- Is the motor complete? Advances the motor forward by a given time. "},{"title":"BaseMotor","type":0,"sectionRef":"#","url":"api/BaseMotor","content":"","keywords":""},{"title":"Types","type":1,"pageTitle":"BaseMotor","url":"api/BaseMotor#types","content":" "},{"title":"MotorState","type":1,"pageTitle":"BaseMotor","url":"api/BaseMotor#MotorState","content":"&lt;/&gt; interface MotorState { value: number velocity: number complete: boolean }  "},{"title":"Functions","type":1,"pageTitle":"BaseMotor","url":"api/BaseMotor#functions","content":" "},{"title":"__tostring","type":1,"pageTitle":"BaseMotor","url":"api/BaseMotor#__tostring","content":"&lt;/&gt; BaseMotor:__tostring() → string Returns the type of motor. Used for isMotor.  "},{"title":"onComplete","type":1,"pageTitle":"BaseMotor","url":"api/BaseMotor#onComplete","content":"&lt;/&gt; BaseMotor:onComplete(handler: () → nil) → Connection Fired whenever a motor finishes. It's recommended to use onStep and check for a certain threshold (i.e. 99% of the way there) instead of using this, as it can often take a while to fire.  "},{"title":"onStart","type":1,"pageTitle":"BaseMotor","url":"api/BaseMotor#onStart","content":"&lt;/&gt; BaseMotor:onStart(handler: () → nil) → Connection Fired whenever BaseMotor:start() is called. If useImplicitConnections is set to true, this will be called whenever setGoal is called.  "},{"title":"onStep","type":1,"pageTitle":"BaseMotor","url":"api/BaseMotor#onStep","content":"&lt;/&gt; BaseMotor:onStep(handler: (state: unknown) → nil) → Connection Fired when the motor's state updates.  "},{"title":"start","type":1,"pageTitle":"BaseMotor","url":"api/BaseMotor#start","content":"&lt;/&gt; BaseMotor:start() → nil Creates a connection to RunService if there isn't one already.  "},{"title":"stop","type":1,"pageTitle":"BaseMotor","url":"api/BaseMotor#stop","content":"&lt;/&gt; BaseMotor:stop() → nil Removes the connection to RunService if it exists. "},{"title":"GroupMotor","type":0,"sectionRef":"#","url":"api/GroupMotor","content":"","keywords":""},{"title":"Types","type":1,"pageTitle":"GroupMotor","url":"api/GroupMotor#types","content":" "},{"title":"GroupMotorGoals","type":1,"pageTitle":"GroupMotor","url":"api/GroupMotor#GroupMotorGoals","content":"&lt;/&gt; interface GroupMotorGoals { [string]: Goal | GroupMotorGoals }   "},{"title":"GroupMotorValues","type":1,"pageTitle":"GroupMotor","url":"api/GroupMotor#GroupMotorValues","content":"&lt;/&gt; interface GroupMotorValues { [string]: number | GroupMotorValues }  "},{"title":"Functions","type":1,"pageTitle":"GroupMotor","url":"api/GroupMotor#functions","content":" "},{"title":"new","type":1,"pageTitle":"GroupMotor","url":"api/GroupMotor#new","content":"&lt;/&gt; GroupMotor.new( initialValues: GroupMotorValues, useImplicitConnections: boolean-- Should connections to RunService be automatically managed? ) → GroupMotor Creates a new GroupMotor.  "},{"title":"__tostring","type":1,"pageTitle":"GroupMotor","url":"api/GroupMotor#__tostring","content":"&lt;/&gt; GroupMotor:__tostring() → string Returns the type of motor. Used for isMotor.  "},{"title":"getValue","type":1,"pageTitle":"GroupMotor","url":"api/GroupMotor#getValue","content":"&lt;/&gt; GroupMotor:getValue() → GroupMotorValues Returns the current values of the GroupMotor.  "},{"title":"setGoal","type":1,"pageTitle":"GroupMotor","url":"api/GroupMotor#setGoal","content":"&lt;/&gt; GroupMotor:setGoal(goals: GroupMotorGoals) → nil Sets sub-motor goals and hooks up a new connection if useImplicitConnections is enabled.  "},{"title":"step","type":1,"pageTitle":"GroupMotor","url":"api/GroupMotor#step","content":"&lt;/&gt; GroupMotor:step(deltaTime: number) → boolean-- Are all sub-motors complete? Advances all sub-motors by a given time. "}]